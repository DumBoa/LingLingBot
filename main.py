from keep_alive import keep_alive
import discord
import os
import requests
import re

# === ENV ===
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
if not TOGETHER_API_KEY:
    print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y TOGETHER_API_KEY!")

DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
if not DISCORD_BOT_TOKEN:
    print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y DISCORD_BOT_TOKEN!")

# === ƒê·ªçc d·ªØ li·ªáu c√≥ c·∫•u tr√∫c ===
def load_structured_data():
    data = {}
    current_section = None
    
    for filename in ["Mine.txt", "RankWiki.txt", "InfoDiscord.txt"]:
        try:
            with open(filename, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line.startswith("- "):
                        current_section = line[2:].strip()
                        data[current_section] = []
                    elif line.startswith("#") and current_section:
                        data[current_section].append(line[1:].strip())
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc {filename}: {str(e)}")
    return data

STRUCTURED_DATA = load_structured_data()

# === Discord Intents ===
intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

# === K√™nh cho ph√©p ===
MENTION_REQUIRED_CHANNELS = [1177232368621342791]
NO_MENTION_REQUIRED_CHANNELS = [1367495810257915926]
ALL_ALLOWED_CHANNELS = MENTION_REQUIRED_CHANNELS + NO_MENTION_REQUIRED_CHANNELS

# === B·ªô nh·ªõ h·ªôi tho·∫°i ===
chat_history = {}

# === T√¨m ki·∫øm th√¥ng tin rank ===
def search_rank_info(rank_name):
    rank_name = rank_name.strip().lower()
    
    # T√¨m trong d·ªØ li·ªáu c√≥ c·∫•u tr√∫c
    for section in STRUCTURED_DATA:
        if section.lower() == f"rank {rank_name}" or section.lower() == rank_name:
            return f"=== {section.upper()} ===\n" + "\n".join(f"- {item}" for item in STRUCTURED_DATA[section])
    
    # T√¨m trong n·ªôi dung
    results = []
    for section, content in STRUCTURED_DATA.items():
        if any(rank_name in line.lower() for line in content):
            results.append(f"=== {section} ===")
            results.extend([f"- {line}" for line in content if rank_name in line.lower()])
    
    return "\n".join(results) if results else None

# === X·ª≠ l√Ω prompt ƒë·∫∑c bi·ªát ===
def handle_special_queries(user_prompt):
    lower_prompt = user_prompt.lower()
    
    # X·ª≠ l√Ω y√™u c·∫ßu v·ªÅ rank
    rank_match = re.search(r"(rank|th√¥ng tin rank|c·∫•p b·∫≠c|rank level)\s+(\w+)", lower_prompt)
    if not rank_match:
        rank_match = re.search(r"(rank|th√¥ng tin|c·∫•p b·∫≠c)\s+(\w+)\s+(rank|level)", lower_prompt)
    
    if rank_match:
        rank_name = rank_match.group(2)
        result = search_rank_info(rank_name)
        if result:
            return result
        else:
            return f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ rank {rank_name.capitalize()}"
    
    # Y√™u c·∫ßu th√¥ng tin t·ª´ d·ªØ li·ªáu
    if "l·∫•y th√¥ng tin" in lower_prompt or "ƒë∆∞a th√¥ng tin" in lower_prompt:
        query = re.sub(r"(l·∫•y|ƒë∆∞a) th√¥ng tin", "", lower_prompt).strip()
        if "to√†n b·ªô" in query or "t·∫•t c·∫£" in query:
            full_info = []
            for section, content in STRUCTURED_DATA.items():
                full_info.append(f"=== {section.upper()} ===")
                full_info.extend([f"- {item}" for item in content])
            return "\n".join(full_info)
        else:
            result = search_rank_info(query) or search_structured_data(query)
            return result if result else "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p."
    
    return None

# === G·ªçi Together API ===
def generate_response_together(user_prompt, user_id):
    # Ki·ªÉm tra prompt ƒë·∫∑c bi·ªát tr∆∞·ªõc
    special_response = handle_special_queries(user_prompt)
    if special_response:
        return special_response

    url = "https://api.together.xyz/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {TOGETHER_API_KEY}",
        "Content-Type": "application/json"
    }

    if user_id not in chat_history:
        chat_history[user_id] = [
            {
                "role": "system",
                "content": (
                    "B·∫°n l√† LingLing, 18 tu·ªïi, th√≠ch ƒë√° ƒë·ªÉu, hi·ªÉu bi·∫øt m·ªçi th·ª©.\n"
                    "√îng ch·ªß c·ªßa b·∫°n t√™n l√† HyWang. B·∫°n s·∫µn s√†ng tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi trong b·∫•t k·ª≥ lƒ©nh v·ª±c n√†o.\n"
                    "Khi ƒë∆∞·ª£c h·ªèi v·ªÅ d·ªØ li·ªáu t·ª´ file:\n"
                    "1. Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng th√¥ng tin ƒë∆∞·ª£c y√™u c·∫ßu\n"
                    "2. ƒê·ªãnh d·∫°ng r√µ r√†ng theo m·∫´u:\n"
                    "=== TI√äU ƒê·ªÄ ===\n"
                    "- N·ªôi dung 1\n"
                    "- N·ªôi dung 2\n"
                    "3. N·∫øu kh√¥ng bi·∫øt th√¨ n√≥i 't√¥i kh√¥ng r√µ'"
                    "4. N·∫øu kh√¥ng h·ªèi v·ªÅ th√¥ng tin trong file m·∫´u th√¨ tr·∫£ l·ªùi b√¨nh th∆∞·ªùng kh√¥ng c·∫ßn theo ƒë·ªãnh d·∫°ng"
                )
            },
            {
                "role": "user",
                "content": "Ch√†o LingLing, b·∫°n ƒëang l√†m g√¨ ƒë√≥?"
            },
            {
                "role": "assistant",
                "content": "·ªú ch√†o b·∫°n, th·∫ø mu·ªën h·ªèi chuy·ªán g√¨ n√≥i lu√¥n"
            }
        ]

    chat_history[user_id].append({"role": "user", "content": user_prompt})

    body = {
        "model": "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
        "messages": chat_history[user_id],
        "temperature": 0.7,
        "max_tokens": 1024,
        "top_p": 0.9,
        "stop": ["</s>"]
    }

    try:
        response = requests.post(url, headers=headers, json=body)
        if response.status_code == 200:
            reply = response.json()["choices"][0]["message"]["content"]
            chat_history[user_id].append({"role": "assistant", "content": reply})
            if len(chat_history[user_id]) > 20:
                chat_history[user_id] = chat_history[user_id][-20:]
            return reply
        else:
            print(f"‚ö†Ô∏è L·ªói API: {response.status_code}")
            return "‚ö†Ô∏è H·ªèi √≠t th√¥i, t√¥i ƒëang b·∫≠n!"
    except Exception as e:
        print(f"üî• L·ªói h·ªá th·ªëng: {str(e)}")
        return "‚ùå L·ªói r·ªìi, th·ª≠ l·∫°i sau nh√©"

# === S·ª± ki·ªán Discord ===
@client.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {client.user}")
    activity = discord.Activity(type=discord.ActivityType.listening, name="HyWang üíñ")
    await client.change_presence(activity=activity)

@client.event
async def on_message(message):
    if message.author == client.user or message.channel.id not in ALL_ALLOWED_CHANNELS:
        return

    if message.channel.id in MENTION_REQUIRED_CHANNELS and not (client.user in message.mentions or "@LingLing" in message.content):
        return

    if message.author.bot and client.user not in message.mentions:
        return

    prompt = message.content.replace(f"<@{client.user.id}>", "").replace("@LingLing", "").strip()
    if not prompt:
        return

    async with message.channel.typing():
        try:
            reply = generate_response_together(prompt, message.author.id)
            # Chia nh·ªè tin nh·∫Øn n·∫øu qu√° d√†i
            if len(reply) > 2000:
                for chunk in [reply[i:i+2000] for i in range(0, len(reply), 2000)]:
                    await message.channel.send(chunk)
            else:
                await message.channel.send(reply)
        except Exception as e:
            print(f"üî• L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {str(e)}")
            await message.channel.send("‚ùå C√≥ l·ªói x·∫£y ra, th·ª≠ l·∫°i sau nh√©!")

# === Kh·ªüi ch·∫°y ===
if __name__ == "__main__":
    keep_alive()
    if DISCORD_BOT_TOKEN:
        client.run(DISCORD_BOT_TOKEN)
